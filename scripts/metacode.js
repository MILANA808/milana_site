const HISTORY_KEY = 'metacodeBlueprints';

const moduleLibrary = {
    memory: {
        label: 'Memory Vault',
        blueprint: '–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Å–∞–π—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–æ–∑–¥–∞—ë–º –∫–ª–∞—Å—Ç–µ—Ä—ã –æ–ø—ã—Ç–∞ –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö –¥–∏–∞–ª–æ–≥–æ–≤.',
        synergy: 'Memory Vault ‚Üî Knowledge Links: –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –≤ –æ—Ç–≤–µ—Ç—ã AKSI.'
    },
    knowledge: {
        label: 'Knowledge Links',
        blueprint: '–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä, –∞–≥—Ä–µ–≥–∏—Ä—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –≥–æ—Ç–æ–≤–∏–º –≤—ã–¥–µ—Ä–∂–∫–∏.',
        synergy: 'Knowledge Links —É—Å–∏–ª–∏–≤–∞—é—Ç –æ—Ç–≤–µ—Ç—ã —Ñ–∞–∫—Ç–∞–º–∏ –∏ –ø–æ–¥–∫–ª—é—á–∞—é—Ç free tier –¥–≤–∏–∂–æ–∫ Milana.'
    },
    creativity: {
        label: 'Creative Pulse',
        blueprint: '–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, —Ñ–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞—Ü–∏–∏ –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.',
        synergy: 'Creative Pulse –≤–≤–æ–¥–∏—Ç —Ä–µ–∂–∏–º –¥–∏–≤–µ—Ä–≥–µ–Ω—Ç–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏.'
    },
    automation: {
        label: 'Action Sequencer',
        blueprint: '–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —à–∞–≥–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.',
        synergy: 'Action Sequencer —Å–≤—è–∑—ã–≤–∞–µ—Ç –≥–æ—Ç–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ Milana.'
    },
    guardian: {
        label: 'Guardian Loop',
        blueprint: '–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º —Ä–∏—Å–∫–∏, –∞—É–¥–∏—Ç –∏ —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π.',
        synergy: 'Guardian Loop –∑–∞—â–∏—â–∞–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —É—Å–ª–æ–≤–∏—è –æ—Ç–∫–∞—Ç–∞.'
    }
};

const safeParseHistory = () => {
    try {
        const raw = localStorage.getItem(HISTORY_KEY);
        const parsed = raw ? JSON.parse(raw) : [];
        return Array.isArray(parsed) ? parsed : [];
    } catch (error) {
        console.warn('[metacode] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é:', error);
        return [];
    }
};

const persistHistory = (entries) => {
    try {
        localStorage.setItem(HISTORY_KEY, JSON.stringify(entries.slice(0, 6)));
    } catch (error) {
        console.warn('[metacode] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é:', error);
    }
};

const buildBlueprint = (goal, modules) => {
    const moduleLines = modules.map((moduleId) => {
        const meta = moduleLibrary[moduleId];
        if (!meta) {
            return `‚Ä¢ ${moduleId}`;
        }
        return `‚Ä¢ ${meta.label}: ${meta.blueprint}`;
    }).join('\n');

    const synergies = [];
    modules.forEach((moduleId) => {
        const meta = moduleLibrary[moduleId];
        if (meta?.synergy) {
            synergies.push(meta.synergy);
        }
    });

    if (modules.includes('memory') && modules.includes('knowledge')) {
        synergies.push('Memory Vault + Knowledge Links: Milana –∏–∑–≤–ª–µ–∫–∞–µ—Ç –ø—Ä–æ—à–ª—ã–µ –¥–∏–∞–ª–æ–≥–∏ –∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç –∏—Ö —Å–≤–µ–∂–∏–º–∏ —Ñ–∞–∫—Ç–∞–º–∏.');
    }
    if (modules.includes('automation') && modules.includes('guardian')) {
        synergies.push('Action Sequencer + Guardian Loop: –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∏—Å–∫–æ–≤ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º.');
    }
    if (!synergies.length) {
        synergies.push('–ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç: —è–¥—Ä–æ AKSI —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —á–∞—Ç Milana –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–∞–º—è—Ç–∏.');
    }

    const scenario = (() => {
        if (modules.includes('automation')) {
            return '–ó–∞–ø—É—Å–∫–∞–µ–º Action Sequencer –∏ –≤—ã–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ–∫-–ª–∏—Å—Ç –¥–µ–π—Å—Ç–≤–∏–π.';
        }
        if (modules.includes('creativity')) {
            return '–û—Ç–∫—Ä—ã–≤–∞–µ–º —Ä–µ–∂–∏–º Creative Pulse –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏.';
        }
        if (modules.includes('guardian')) {
            return '–ü–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π –æ—Ç–≤–µ—Ç–∞ –∑–∞–ø—É—Å–∫–∞–µ–º Guardian Loop –∏ —Å–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞.';
        }
        return '–°—Ç–∞—Ä—Ç—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç–≤–µ—Ç Milana –∏ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã –≤ –ø–∞–º—è—Ç—å.';
    })();

    const sections = [
        `üß≠ –§–æ–∫—É—Å: ${goal}`,
        'üß¨ –ú–µ—Ç–∞–∫–æ–¥ —è–¥—Ä–∞ AKSI:\n‚Ä¢ –ù–µ–π—Ä–æ—è–¥—Ä–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–¥–∞–Ω–Ω—ã–µ –∏ —á–∞—Ç Milana.\n‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.',
        `üì¶ –ú–æ–¥—É–ª–∏:\n${moduleLines}`,
        `üîó –°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏–µ –ø–æ—Ç–æ–∫–æ–≤:\n${synergies.join('\n')}`,
        `üöÄ –°—Ç–∞—Ä—Ç–æ–≤—ã–π –ø—Ä–æ—Ç–æ–∫–æ–ª: ${scenario}`
    ];

    return sections.join('\n\n');
};

const renderHistory = (container) => {
    if (!container) return;
    const entries = safeParseHistory();
    container.innerHTML = '';

    if (!entries.length) {
        const empty = document.createElement('p');
        empty.className = 'note';
        empty.textContent = '–ê—Ä—Ö–∏–≤ –º–µ—Ç–∞–∫–æ–¥–∞ –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.';
        container.appendChild(empty);
        return;
    }

    entries.forEach((entry) => {
        const card = document.createElement('div');
        card.className = 'metacode-history-entry';

        const timestamp = document.createElement('strong');
        const stamp = entry.timestamp ? new Date(entry.timestamp) : new Date();
        timestamp.textContent = stamp.toLocaleString('ru-RU', {
            dateStyle: 'short',
            timeStyle: 'short'
        });

        const goal = document.createElement('p');
        goal.textContent = entry.goal || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è —Ü–µ–ª–∏';

        card.appendChild(timestamp);
        card.appendChild(goal);

        if (Array.isArray(entry.modules) && entry.modules.length) {
            const tags = document.createElement('div');
            tags.className = 'metacode-history-tags';
            entry.modules.forEach((moduleId) => {
                const tag = document.createElement('span');
                tag.textContent = moduleLibrary[moduleId]?.label || moduleId;
                tags.appendChild(tag);
            });
            card.appendChild(tags);
        }

        container.appendChild(card);
    });
};

export const initMetacodeStudio = () => {
    const generateButton = document.getElementById('metacodeGenerate');
    if (!generateButton) return;

    const goalField = document.getElementById('metacodeGoal');
    const statusField = document.getElementById('metacodeStatus');
    const outputField = document.getElementById('metacodeOutput');
    const historyContainer = document.getElementById('metacodeHistory');

    const setStatus = (message, isError = false) => {
        if (!statusField) return;
        statusField.textContent = message;
        statusField.style.color = isError ? '#ff8fb7' : '#d4c7ff';
    };

    renderHistory(historyContainer);

    generateButton.addEventListener('click', () => {
        const goal = goalField?.value.trim();
        if (!goal) {
            setStatus('–î–æ–±–∞–≤—å—Ç–µ —Ü–µ–ª—å –∏–ª–∏ –≥–∏–ø–æ—Ç–µ–∑—É, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –º–µ—Ç–∞–∫–æ–¥.', true);
            return;
        }

        const selectedModules = Array.from(document.querySelectorAll('input[name="metacodeModule"]:checked'))
            .map((input) => input.value);

        if (!selectedModules.length) {
            setStatus('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –º–æ–¥—É–ª—å AKSI ‚Äî —Ç–∞–∫ blueprint —Å—Ç–∞–Ω–µ—Ç –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–º.', true);
            return;
        }

        const blueprint = buildBlueprint(goal, selectedModules);
        if (outputField) {
            outputField.textContent = blueprint;
            outputField.scrollTop = 0;
        }

        const history = safeParseHistory();
        history.unshift({
            goal,
            modules: selectedModules,
            blueprint,
            timestamp: new Date().toISOString()
        });
        persistHistory(history);
        renderHistory(historyContainer);
        setStatus('Blueprint AKSI —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∞—Ä—Ö–∏–≤. –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –≤ —Ä–∞–±–æ—á–∏–π —Å—Ü–µ–Ω–∞—Ä–∏–π.', false);
    });
};
