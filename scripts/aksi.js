const channelLabels = {
    voice: '–ì–æ–ª–æ—Å–æ–≤–æ–π —Å—Ç—Ä–∏–º',
    vision: '–í–∏–∑—É–∞–ª—å–Ω—ã–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏',
    automation: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –¥–µ–π—Å—Ç–≤–∏–π'
};

const scenarioTemplates = {
    research: {
        label: '–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞',
        opening: 'AKSI —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç —Ä–µ–∂–∏–º —Ä–∞–∑–≤–µ–¥–∫–∏ –∑–Ω–∞–Ω–∏–π –∏ —Å–æ–±–∏—Ä–∞–µ—Ç –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å–Ω—É—é –±–∞–∑—É.',
        steps: [
            '–°–∫–∞–Ω–∏—Ä—É–µ–º Memory Vault –∏ –≤—ã–Ω–æ—Å–∏–º –∫–ª—é—á–µ–≤—ã–µ —Ö—Ä–æ–Ω–∏–∫–∏.',
            '–ü–æ–¥–∫–ª—é—á–∞–µ–º Knowledge Links, —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ñ–∞–∫—Ç–æ–≤ –∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è.',
            '–°–æ–±–∏—Ä–∞–µ–º –Ω–∞–±–æ—Ä –≥–∏–ø–æ—Ç–µ–∑ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–æ–≤.'
        ],
        closing: '–ó–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ ‚Äî AKSI —Ä–∞—Å—à–∏—Ä–∏—Ç –æ–±–∑–æ—Ä –∏–ª–∏ —É–≥–ª—É–±–∏—Ç –∞–Ω–∞–ª–∏–∑.',
        signal: 'üîç –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–∫—Ç–∞–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º.'
    },
    strategy: {
        label: '–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∞—è —Å–µ—Å—Å–∏—è',
        opening: 'AKSI –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π –∫–æ—Ä–∏–¥–æ—Ä —Å —É—á—ë—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –∏ —Ä–µ—Å—É—Ä—Å–æ–≤.',
        steps: [
            '–§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç—É —Ü–µ–ª–µ–π –∏ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ —É—Å–ø–µ—Ö–∞.',
            '–°–≤—è–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º–∏ —Ä–µ—à–µ–Ω–∏—è–º–∏ –∏–∑ –ø–∞–º—è—Ç–∏.',
            '–ì–æ—Ç–æ–≤–∏–º —Å—Ü–µ–Ω–∞—Ä–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏.'
        ],
        closing: '–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –∑–∞–º–µ—Ä ‚Äî Milana –¥–æ–±–∞–≤–∏—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.',
        signal: 'üß≠ –°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º: —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Ç–æ—á–∫–∏ –∏ KPI.'
    },
    support: {
        label: '–≠–º–ø–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        opening: 'AKSI –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –≤ —Ä–µ–∂–∏–º —Ç—ë–ø–ª–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã.',
        steps: [
            '–§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ —É—Ç–æ—á–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.',
            '–ù–∞—Ö–æ–¥–∏–º —Ä–µ—Å—É—Ä—Å—ã –∏ –ø—Ä–∞–∫—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —ç–º–æ—Ü–∏–∏.',
            '–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–ª–∞–Ω –º—è–≥–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π –∏ —Ç–æ—á–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏.'
        ],
        closing: '–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –ê–∫—Å–∏ —Å—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫.',
        signal: 'ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ ‚Äî —è–∑—ã–∫ –æ—Ç–≤–µ—Ç–æ–≤ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –º—è–≥–∫–∏–º –∏ –∑–∞–±–æ—Ç–ª–∏–≤—ã–º.'
    }
};

const buildSignals = ({ empathy, focus, risk }, channels, scenarioId) => {
    const signals = [];

    if (empathy >= 70) {
        signals.push('üíú –í—ã—Å–æ–∫–∞—è —ç–º–ø–∞—Ç–∏—è: –ê–∫—Å–∏ —É—Å–∏–ª–∏–≤–∞–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏ —Ä–∞—Å—à–∏—Ä—è–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å.');
    } else if (empathy <= 30) {
        signals.push('üßä –≠–º–ø–∞—Ç–∏—è —Å–Ω–∏–∂–µ–Ω–∞: –æ—Ç–≤–µ—Ç—ã –±—É–¥—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–º–∏ –∏ –ø—Ä—è–º—ã–º–∏.');
    }

    if (focus >= 70) {
        signals.push('üéØ –§–æ–∫—É—Å –ø–æ–≤—ã—à–µ–Ω: Milana —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç —á—ë—Ç–∫–∏–µ deliverables –∏ –¥–µ–¥–ª–∞–π–Ω—ã.');
    } else if (focus <= 40) {
        signals.push('üåå –§–æ–∫—É—Å –º—è–≥–∫–∏–π: –¥–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–±–æ–¥–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≤–∏–ª–∫–∏.');
    }

    if (risk >= 70) {
        signals.push('üõ°Ô∏è –†–∏—Å–∫ –≤—ã—Å–æ–∫–∏–π: Guardian Loop –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –¥–≤–æ–π–Ω–æ–π –∞—É–¥–∏—Ç –ø–µ—Ä–µ–¥ –æ—Ç–≤–µ—Ç–æ–º.');
    } else if (risk <= 30) {
        signals.push('üí® –†–∏—Å–∫ –Ω–∏–∑–∫–∏–π: –¥–æ–ø—É—Å–∫–∞–µ–º –±—ã—Å—Ç—Ä—ã–µ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç—ã –∏ —Å–º–µ–ª—ã–µ –≥–∏–ø–æ—Ç–µ–∑—ã.');
    }

    if (channels.length) {
        const channelText = channels
            .map((channel) => channelLabels[channel] || channel)
            .join(', ');
        signals.push(`üì° –ö–∞–Ω–∞–ª—ã: ${channelText}.`);
    } else {
        signals.push('üì° –ö–∞–Ω–∞–ª—ã: –∞–∫—Ç–∏–≤–µ–Ω —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Milana.');
    }

    const scenarioSignal = scenarioTemplates[scenarioId]?.signal
        || 'ü™ê –†–µ–∂–∏–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π: Milana –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç—ã –ø–æ–¥ –∫–æ–Ω—Ç–µ–∫—Å—Ç.';
    signals.push(scenarioSignal);

    return signals;
};

const composePlan = (template, context, { empathy, focus, risk }, channels) => {
    const steps = [...template.steps];

    if (empathy >= 70) {
        steps.push('–î–æ–±–∞–≤–ª—è–µ–º —Å–ª–æ–π —ç–º–ø–∞—Ç–∏—á–µ—Å–∫–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –∏ –º—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏.');
    } else if (empathy <= 30) {
        steps.push('–ó–∞–∫—Ä–µ–ø–ª—è–µ–º –ª–∞–∫–æ–Ω–∏—á–Ω—ã–π —Ç–æ–Ω –∏ –ø—Ä—è–º—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.');
    }

    if (focus >= 70) {
        steps.push('–§–∏–∫—Å–∏—Ä—É–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ deliverables –∏ –¥–µ–¥–ª–∞–π–Ω—ã.');
    }

    if (risk >= 70) {
        steps.push('Guardian Loop –ø—Ä–æ–≤–æ–¥–∏—Ç –∞—É–¥–∏—Ç –ø–µ—Ä–µ–¥ –≤—ã–¥–∞—á–µ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.');
    }

    if (channels.includes('automation')) {
        steps.push('Action Sequencer –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
    }

    const channelLine = channels.length
        ? `üì° –ö–∞–Ω–∞–ª—ã: ${channels.map((channel) => channelLabels[channel] || channel).join(', ')}.`
        : 'üì° –ö–∞–Ω–∞–ª—ã: —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Milana.';

    const planSegments = [
        `üéØ –°—Ü–µ–Ω–∞—Ä–∏–π: ${template.label}`,
        `ü™ê –ö–æ–Ω—Ç–µ–∫—Å—Ç: ${context}`,
        template.opening,
        `üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: —ç–º–ø–∞—Ç–∏—è ${empathy}%, —Ñ–æ–∫—É—Å ${focus}%, —Ä–∏—Å–∫ ${risk}%`,
        `üö¶ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n${steps.map((step, index) => `${index + 1}. ${step}`).join('\n')}`,
        channelLine,
        template.closing
    ];

    return planSegments.join('\n\n');
};

export const initAksiConsole = () => {
    const composeButton = document.getElementById('aksiComposeButton');
    if (!composeButton) return;

    const scenarioField = document.getElementById('aksiScenario');
    const contextField = document.getElementById('aksiContext');
    const empathyField = document.getElementById('aksiEmpathy');
    const focusField = document.getElementById('aksiFocus');
    const riskField = document.getElementById('aksiRisk');
    const planField = document.getElementById('aksiPlan');
    const signalsList = document.getElementById('aksiSignals');
    const statusField = document.getElementById('aksiStatus');
    const empathyValue = document.getElementById('aksiEmpathyValue');
    const focusValue = document.getElementById('aksiFocusValue');
    const riskValue = document.getElementById('aksiRiskValue');

    const updateSliderValue = (input, target) => {
        if (!input || !target) return;
        target.textContent = `${input.value}%`;
    };

    updateSliderValue(empathyField, empathyValue);
    updateSliderValue(focusField, focusValue);
    updateSliderValue(riskField, riskValue);

    [
        [empathyField, empathyValue],
        [focusField, focusValue],
        [riskField, riskValue]
    ].forEach(([input, target]) => {
        if (!input || !target) return;
        input.addEventListener('input', () => updateSliderValue(input, target));
    });

    const setStatus = (message, isError = false) => {
        if (!statusField) return;
        statusField.textContent = message;
        statusField.style.color = isError ? '#ff8fb7' : '#d4c7ff';
    };

    composeButton.addEventListener('click', () => {
        const context = contextField?.value.trim();
        if (!context) {
            setStatus('–û–ø–∏—à–∏—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–ª–∏ –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ê–∫—Å–∏.', true);
            return;
        }

        const scenarioId = scenarioField?.value || 'research';
        const template = scenarioTemplates[scenarioId] || scenarioTemplates.research;
        const empathy = Number(empathyField?.value ?? 0);
        const focus = Number(focusField?.value ?? 0);
        const risk = Number(riskField?.value ?? 0);
        const channels = Array.from(document.querySelectorAll('input[name="aksiChannel"]:checked'))
            .map((input) => input.value);

        const plan = composePlan(template, context, { empathy, focus, risk }, channels);
        if (planField) {
            planField.textContent = plan;
            planField.scrollTop = 0;
        }

        if (signalsList) {
            signalsList.innerHTML = '';
            buildSignals({ empathy, focus, risk }, channels, scenarioId).forEach((signal) => {
                const item = document.createElement('li');
                item.textContent = signal;
                signalsList.appendChild(item);
            });
        }

        setStatus('–ü—Ä–æ—Ç–æ–∫–æ–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω. Milana –≥–æ—Ç–æ–≤–∞ –∫ –∑–∞–ø—É—Å–∫—É –º–µ—Ç–∞—Å—Ü–µ–Ω–∞—Ä–∏—è.', false);
    });
};
