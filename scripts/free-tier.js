const normaliseTopic = (text) => {
    if (!text) return '';
    return String(text).toLowerCase().replace(/\s+/g, ' ').trim();
};

const toArray = (value) => Array.isArray(value) ? value : [];

const limitText = (text, maxLength = 900) => {
    if (!text) return '';
    const content = String(text);
    return content.length > maxLength ? `${content.slice(0, maxLength)}‚Ä¶` : content;
};

export function createFreeTierEngine({
    knowledgeHub,
    memoryVault,
    clock = () => new Date(),
    cacheTtl = 60_000
} = {}) {
    if (!knowledgeHub || typeof knowledgeHub.gather !== 'function') {
        throw new Error('–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è knowledgeHub —Å –º–µ—Ç–æ–¥–æ–º gather.');
    }
    if (!memoryVault || typeof memoryVault.recall !== 'function') {
        throw new Error('–î–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è memoryVault —Å –º–µ—Ç–æ–¥–æ–º recall.');
    }

    let aggregation = {
        topic: '',
        originalTopic: '',
        combinedText: '',
        entries: [],
        errors: [],
        timestamp: 0
    };

    const recordAggregation = ({ topic, combinedText = '', entries = [], errors = [] } = {}) => {
        aggregation = {
            topic: normaliseTopic(topic),
            originalTopic: topic || '',
            combinedText: combinedText || '',
            entries: toArray(entries),
            errors: toArray(errors),
            timestamp: Date.now()
        };
    };

    const ensureAggregation = async (topicText) => {
        const normalised = normaliseTopic(topicText);
        const isCached = normalised
            && aggregation.topic === normalised
            && Date.now() - aggregation.timestamp < cacheTtl;

        if (isCached) {
            return aggregation;
        }

        if (!normalised) {
            aggregation = {
                topic: '',
                originalTopic: '',
                combinedText: '',
                entries: [],
                errors: ['–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ –¥–≤–∏–∂–∫–∞.'],
                timestamp: Date.now()
            };
            return aggregation;
        }

        try {
            const result = await knowledgeHub.gather(topicText, { limit: 4 });
            aggregation = {
                topic: normalised,
                originalTopic: topicText,
                combinedText: result?.combinedText || '',
                entries: toArray(result?.entries),
                errors: toArray(result?.errors),
                timestamp: Date.now()
            };
        } catch (error) {
            const message = error instanceof Error ? error.message : String(error);
            aggregation = {
                topic: normalised,
                originalTopic: topicText,
                combinedText: '',
                entries: [],
                errors: [message],
                timestamp: Date.now()
            };
        }

        return aggregation;
    };

    const buildKnowledgeBlock = (data) => {
        if (!data) {
            return 'üåê –û–∂–∏–¥–∞—é —Å–∏–≥–Ω–∞–ª –æ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.';
        }
        if (data.combinedText) {
            return `üìö –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–¥–æ—Å—å–µ:\n${limitText(data.combinedText, 900)}`;
        }
        if (data.errors.length) {
            return `üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: ${data.errors[0]}`;
        }
        return 'üåê –ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞–¥–µ–π—Å—Ç–≤–æ–≤–∞–Ω—ã ‚Äî –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ.';
    };

    const buildPlan = (topic, knowledge, memorySummary) => {
        const steps = [];
        if (topic) {
            steps.push(`1. –§–æ—Ä–º—É–ª–∏—Ä—É—é –∑–∞–¥–∞—á—É: ${topic}.`);
        } else {
            steps.push('1. –ñ–¥—É —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫—É –∑–∞–¥–∞—á–∏, —á—Ç–æ–±—ã —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—é.');
        }

        if (knowledge?.combinedText) {
            steps.push('2. –ò–∑–≤–ª–µ–∫–∞—é –∫–ª—é—á–µ–≤—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.');
        } else if (knowledge?.errors?.length) {
            steps.push('2. –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É—é—Ç –æ —Å–±–æ–µ, –Ω–æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ—Å—Ç—Ä–æ—é.');
        } else {
            steps.push('2. –ì–æ—Ç–æ–≤–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –ø–µ—Ä–≤–æ–º—É —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é.');
        }

        if (memorySummary) {
            steps.push('3. –£—á–∏—Ç—ã–≤–∞—é —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –∏–Ω—Å–∞–π—Ç—ã –∏ —É—Å–∏–ª–∏–≤–∞—é –æ—Ç–≤–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º–∏ –Ω—é–∞–Ω—Å–∞–º–∏.');
        } else {
            steps.push('3. –°–æ–∑–¥–∞—é —Å–≤–µ–∂—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –Ω–∞—á–Ω—É —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤–∞–∂–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –¥–ª—è –ø–∞–º—è—Ç–∏.');
        }

        steps.push('4. –°—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏–µ ‚Äî –ø—Ä–æ–¥–æ–ª–∂—É –±–µ–∑ –∑–∞–¥–µ—Ä–∂–µ–∫.');

        return `üöÄ –ü–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π:\n${steps.join('\n')}`;
    };

    const respond = async (messages = []) => {
        const now = clock();
        const iso = now.toISOString();
        const humanTime = now.toLocaleString('ru-RU', {
            dateStyle: 'long',
            timeStyle: 'medium'
        });

        const reversed = Array.isArray(messages) ? [...messages].reverse() : [];
        const lastUserMessage = reversed.find((entry) => entry?.role === 'user');
        const topic = lastUserMessage?.content?.trim() || '';
        const data = await ensureAggregation(topic || aggregation.originalTopic);
        const memorySummary = memoryVault.recall({ limit: 6, maxLength: 900 }) || '';

        const intro = topic
            ? `üìù –ó–∞–ø—Ä–æ—Å: ${topic}`
            : 'üìù –ñ–¥—É –≤–∞—à –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–≤–µ—Ä—Ö—Ä–µ–∂–∏–º.';

        const memoryBlock = memorySummary
            ? `üß† –ò–∑ –ø–∞–º—è—Ç–∏ Milana: ${limitText(memorySummary, 420)}`
            : 'üß† –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∏–Ω—Å–∞–π—Ç–æ–≤ ‚Äî –º—ã –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞.';

        return [
            `‚ö° –†–µ–∂–∏–º Milana Super GPTb (free tier). –°–µ–π—á–∞—Å ${humanTime} (ISO: ${iso}).`,
            intro,
            buildKnowledgeBlock(data),
            memoryBlock,
            buildPlan(topic, data, memorySummary),
            '–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ ‚Äî –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ä–µ–∂–∏–º —É–∂–µ –æ—Ç–≤–µ—á–∞–µ—Ç –±–µ–∑ –∫–ª—é—á–∞. –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –æ–±–ª–∞—á–Ω—ã–º –º–æ–¥–µ–ª—è–º –¥–æ–±–∞–≤—å—Ç–µ –∫–ª—é—á –≤ –ø–∞–Ω–µ–ª–∏ –≤—ã—à–µ.'
        ].join('\n\n');
    };

    return {
        respond,
        recordAggregation
    };
}
